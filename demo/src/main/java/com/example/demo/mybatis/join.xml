<!-- 자주 사용하는 SQL
데이터 CRUD 명령어
조회
SELECT column1, column2, ...
FROM TableName
WHERE condition;
추가 
INSERT INTO TableName (column1, column2, ...)
VALUES (value1, value2, ...);
수정
UPDATE TableName
SET column1 = value1, column2 = value2, ...
WHERE condition;
삭제 
DELETE FROM TableName
WHERE condition;

특정값 조회
SELECT column1, column2, ...
FROM table_name
WHERE condition;
-column1, column2, ...: 조회하려는 열(Column) 이름을 나열합니다. 모든 열을 조회하려면 *를 사용할 수 있습니다.
-table_name: 데이터를 조회할 테이블의 이름입니다.
-WHERE condition: 선택적으로, 특정 조건을 지정하여 조건에 맞는 행만을 조회할 수 있습니다.

1) 테이블 생성 : 
CREATE TABLE 테이블명 (
    column명 datatype,
    column명 datatype,
    ...
);

2) 조회 결과로 테이블 생성 :
CREATE TABLE 생성할 테이블명 AS SELECT * FROM 기존 테이블명;
// 예제
CREATE TABLE tmp_customers AS SELECT * FROM Customers;

3) 테이블 Column명 변경 : 
ALTER TABLE 테이블명 RENAME COLUMN 예전 이름 TO 바꿀 이름;
// 예제
ALTER TABLE tmp_customers RENAME COLUMN CustomerName TO Name;

4) 테이블 삭제
DROP TABLE 테이블명;
// 예제
DROP TABLE tmp_customers;

5) LIKE / WHERE 절에 사용 가능
-LIKE '%hello'; // 앞 내용이 무엇이든 끝이 hello인 모든 요소
-LIKE 'hello%'; // 앞은 무조건 hello로 시작하고 끝은 상관 없는 모든 요소
-LIKE '%hello%'; // 앞과 뒤는 상관없으나 중간에 무조건 hello가 포함되어 있는 모든 요소
// 예제
SELECT * FROM 
    table 
WHERE 
    text LIKE 'SQL%';

6) BETWEEN a AND b
a와 b를 포함한 모든 사이값들
// 예제
SELECT * FROM
    Products
WHERE
    CategoryId BETWEEN '1996-07-01' AND '1996-07-05';
-->

<!--XML 버전 선언 (<?xml version="1.0" encoding="UTF-8" ?>):

XML 문서의 첫 부분에 위치하며, 문서가 어떤 버전의 XML을 따르는지를 지정합니다. 여기서는 XML 1.0 버전을 사용하고 있습니다.
encoding="UTF-8"는 XML 문서의 문자 인코딩을 UTF-8로 설정하고 있습니다. UTF-8은 다국어를 지원하는 문자 인코딩 방식 중 하나입니다.
DOCTYPE 선언:

DOCTYPE 선언은 XML 문서가 따르는 DTD를 지정합니다. DTD는 XML 문서의 구조를 정의하고 유효성 검사에 사용됩니다.
MyBatis의 매퍼 파일에는 자체적인 DTD가 정의되어 있으며, 이를 참조하기 위해 해당 URL을 사용합니다. 이 DTD는 MyBatis의 매퍼 파일이 어떤 구조를 가져야 하는지를 정의합니다.-->
<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

  <!--<mapper namespace="join">: 매퍼의 네임스페이스를 "join"으로 지정합니다. 이 네임스페이스는 매퍼 파일 내에서 SQL 쿼리들을 그룹화하고 식별하는 데 사용됩니다.

  <insert id="joinMember" parameterType="JoinVo">: insert는 데이터를 데이터베이스에 추가하는 SQL 쿼리를 정의합니다.

  id는 이 쿼리를 식별하는 고유한 ID입니다. 이 ID는 나중에 Java 코드에서 MyBatis를 사용하여 해당 SQL 쿼리를 호출할 때 사용됩니다.
  parameterType="JoinVo"는 이 쿼리에 전달되는 매개변수의 자료형을 지정합니다. 여기서는 JoinVo 클래스의 객체가 이 쿼리에 전달될 것으로 예상됩니다.
  insert into student(id, pwd, name) values(#{id}, #{pwd}, #{name}): 이 부분은 데이터를 삽입하는 실제 SQL 쿼리입니다.

  student는 데이터를 삽입할 테이블의 이름입니다.
  id, pwd, name은 테이블의 컬럼 이름입니다.
  #{id}, #{pwd}, #{name}은 MyBatis의 파라미터 매핑 문법입니다. 이 문법을 사용하면 SQL 쿼리에 전달된 객체의 필드와 값이 해당 자리에 매핑됩니다.
  이 매퍼 파일을 사용하면, 예를 들어 Java 코드에서 joinMember라는 ID를 가진 SQL을 호출하면, MyBatis는 해당 SQL을 실행하고 매개변수로 전달된 JoinVo 객체의 필드 값을 데이터베이스에 삽입할 것입니다.-->
  <mapper namespace="join">
    <insert id="joinMember" parameterType="JoinVo">
      insert into student(id, pwd, name)
      values(#{id}, #{pwd}, #{name})
    </insert>
  </mapper>